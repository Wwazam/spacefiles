* Own menu

#+BEGIN_SRC emacs-lisp

 (spacemacs/declare-prefix "o" "own-menu")

#+END_SRC
* Graphic
** Modeline
*** Separators

#+BEGIN_SRC emacs-lisp

 (setq powerline-default-separator 'contour)


#+END_SRC

*** Remove minor modes

#+BEGIN_SRC emacs-lisp

(spaceline-toggle-minor-modes-off)

#+END_SRC

* Navigation
** avy

#+BEGIN_SRC emacs-lisp

  (define-key evil-insert-state-map (kbd "C-.") 'avy-goto-word-or-subword-1)
  (define-key evil-normal-state-map (kbd "C-.") 'avy-goto-word-or-subword-1)
  (define-key evil-visual-state-map (kbd "C-.") 'avy-goto-word-or-subword-1)
  (define-key evil-motion-state-map (kbd "C-.") 'avy-goto-word-or-subword-1)

#+END_SRC

* Evil
** jk to Normal Mode

#+BEGIN_SRC emacs-lisp

(setq-default evil-escape-key-sequence "jk")
(setq-default evil-escape-unordered-key-sequence "jk")
(setq-default evil-escape-delay 0.5)

#+END_SRC

** emacs state by default
   
#+BEGIN_SRC emacs-lisp

  ; (add-to-list 'evil-emacs-state-modes org-agenda calc-mode)

#+END_SRC
* Ispell
** disabled by default
   
#+BEGIN_SRC emacs-lisp

(setq spell-checking-enable-by-default nil)

#+END_SRC

* Org
** Org-bullets

Makes it all look a bit nicer, I hate looking at asterisks.
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t)
  (setq org-bullets-fac-name (quote org-bullet-face))
  (add-hook 'org-mode-hook (lambda ()(org-bullets-mode 1)))

  (setq org-bullets-bullet-list '("·"))

  ;(setq org-ellipsis " ▼")
  (set-display-table-slot standard-display-table 
      'selective-display (string-to-vector " …")) ; or whatever you like
#+END_SRC

** TO DO keywords

#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'org
    (setq org-todo-keywords 
        '((sequence "TODO(t)" "WAIT(w@)" "|" "DONE(d!)" )
        (sequence "ISSUE(i@)" "|" "CANCELED(a@)")
    ))

    (setq org-todo-keyword-faces
        '(
            ("TODO" .(:foreground "#bc8383" :weight bold)) 
            ("DONE" .(:foreground "#94bff3")) 
            ("WAIT" .(:foreground "#ebe9bf")) 
            ("ISSUE" .(:foreground "#dfaf8f")) 
            ("CANCELED" .(:foreground "#7f9f7f"))
    ))

    (setq org-log-into-drawer t)
  )
#+END_SRC

** ISSUE < & > as shiftmetaleft/right
   :LOGBOOK:
   - State "ISSUE"      from              [2019-01-14 lun. 16:25] \\
     doesn't work
   :END:

  #+BEGIN_SRC emacs-lisp
    ;(use-package org
    ;  :ensure t
    ;  :bind
    ;  (">" . org-shiftmetaleft)
    ;  ("<" . org-shiftmetaright)
    ;)
#+END_SRC

** Capture templates
   
#+BEGIN_SRC emacs-lisp
  (setq org-defaults-notes-file "~/documents/notes/notes.org")
  (setq org-capture-templates
        '(
          ("h" "Home" entry (file "~/documents/notes/inbox.org")
           "* TODO %?   :home:\n %i\n\n")
          ("w" "Work" entry (file "~/documents/notes/inbox.org")
           "* TODO %?   :work:\n %i\n\n")
          ("e" "Errand" entry (file "~/documents/notes/inbox.org")
           "* TODO %?   :errand:\n %i\n\n")
          ("c" "Computer" entry (file "~/documents/notes/inbox.org")
           "* TODO %?   :computer:\n %i\n\n")
          ("m" "Meeting" entry (file "~/documents/notes/inbox.org")
           "* TODO %?   :meeting:\n %i\n\n")
          ("d" "Diary" entry (file+datetree "~/documents/notes/diary.org")
           "* %?\n")
          ("j" "Journal" entry (file+datetree "~/documents/notes/journal.org")
            "* %?\n")
          ))
#+END_SRC

** Agenda
*** Transient state

#+BEGIN_SRC emacs-lisp

  (use-package org-agenda
    :config
      (evilified-state-evilify-map org-agenda-mode-map
        :mode org-agenda-mode
        :bindings
          (kbd "C-SPC") 'spacemacs/org-agenda-transient-state/body
          (kbd "C-c C-c") 'spacemacs/org-agenda-transient-state/body
    )
  )
#+END_SRC
*** Custom views
    
#+BEGIN_SRC emacs-lisp
  (defun my/org-agenda-skip-without-match (match)
    "Skip current headline unless it matches MATCH.

  Return nil if headline containing point matches MATCH (which
  should be a match string of the same format used by
  `org-tags-view').  If headline does not match, return the
  position of the next headline in current buffer.

  Intended for use with `org-agenda-skip-function', where this will
  skip exactly those headlines that do not match." 
    (save-excursion
      (unless (org-at-heading-p) (org-back-to-heading)) 
      (let ((next-headline (save-excursion
                             (or (outline-next-heading) (point-max)))))
        (if (my/org-match-at-point-p match) nil next-headline))))

  (setq org-agenda-custom-commands
        '(("g" . "GTD contexts")
          ("gw" "Work" tags-todo "work")
          ("gc" "Computer" tags-todo "computer")
          ("gm" "Meeting" tags-todo "meeting")
          ("gh" "Home" tags-todo "home")
          ("ge" "Errands" tags-todo "errands")
          ("G" "GTD Block Agenda"
           ((tags-todo "work")
            (tags-todo "computer")
            (tags-todo "meeting")
            (tags-todo "home")
            (tags-todo "errands"))
           nil                      ;; i.e., no local settings
           ("~/next-actions.html")) ;; exports block to this file with C-c a e

          ("d" . "Day")
          ("dd" "Day" agenda "All the events, not filtered"
           ((org-agenda-span 1)
            (org-agenda-start-on-weekday nil)
            ))
          ("dw" "Work" agenda "Events tagged 'work' and 'meeting'"
          ((org-agenda-span 1)
          (org-agenda-start-on-weekday nil)
          (org-agenda-tag-filter-preset '("+work"))
          ))
          ("dp" "Personnal" agenda "Events tagged 'work', 'errands', 'meeting' and 'computer'"
           ((org-agenda-span 1)
            (org-agenda-start-on-weekday nil)
            (org-agenda-tag-filter-preset '("-work"))
            ))
          )
  )
#+END_SRC
** Plantuml
*** Babel

 #+BEGIN_SRC emacs-lisp

 (org-babel-do-load-languages
    'org-babel-load-languages
    '( (plantuml  . t)
       ))

 #+END_SRC

*** jar path

#+BEGIN_SRC emacs-lisp

(setq org-plantuml-jar-path "~/.spacemacs.d/extra/plantuml.jar")
(setq plantuml-jar-path "~/.spacemacs.d/extra/plantuml.jar")

#+END_SRC

** Scrivener

#+BEGIN_SRC emacs-lisp
  (defun my/org-tree-to-indirect-buffer-follow ()
    "Open tree in indirect buffer and follows it"
    (interactive)
    (org-tree-to-indirect-buffer)
    (windmove-right)
    )

  (defun my/scrivener ()
    "Opens the outline of the org doc on the left and allows you to open the content on the right"
    (interactive)
    (delete-other-windows)
    (split-window-right)
    (golden-ratio-mode 1)
    (setq golden-ratio-adjust-factor 1.3)
    )

  (add-hook 'org-mode-hook 
            (lambda ()
              (define-key evil-normal-state-map (kbd "<return>") 'org-tree-to-indirect-buffer)
              (define-key evil-normal-state-map (kbd "S-<return>") 'my/org-tree-to-indirect-buffer-follow)
              (spacemacs/set-leader-keys "os" 'my/scrivener)
  ))

#+END_SRC

** Babel

#+BEGIN_SRC emacs-lisp

(setq org-confirm-babel-evaluate nil)

#+END_SRC

*** languages

#+BEGIN_SRC emacs-lisp

  (org-babel-do-load-languages
     'org-babel-load-languages
     '( (python  . t)
        (plantuml . t)
        (emacs-lisp . t)
        ))

#+END_SRC

** TODO M-Ret

  (add-hook 'org-mode-hook
            (lambda ()
              (define-key evil-normal-state-map (kbd "M-<return>") 'org-meta-return)))

** Refile
*** Sources
   
 #+BEGIN_SRC emacs-lisp


 (setq org-refile-targets
       '((org-agenda-files :maxlevel . 1)))

 #+END_SRC

*** Refile on root

#+BEGIN_SRC emacs-lisp

(setq org-refile-use-outline-path 'file)
(setq org-outline-path-complete-in-steps nil)
(setq org-refile-allow-creating-parent-nodes 'confirm)

#+END_SRC

* Display
** golden mode

#+BEGIN_SRC emacs-lisp

  (golden-ratio-mode 1)

#+END_SRC

* Yasnippet
** Directory

#+BEGIN_SRC emacs-lisp

(add-to-list 'yas-snippet-dirs "~/.spacemacs.d/snippets")

#+END_SRC

** Expand key

#+BEGIN_SRC emacs-lisp

(eval-after-load "evil-maps"
  (dolist (map '(evil-insert-state-map))
          (define-key (eval map) "\C-n" nil)))
(define-key evil-insert-state-map (kbd "C-n") 'hippie-expand)
#+END_SRC

* plantuml
** Hook

#+BEGIN_SRC emacs-lisp

(add-hook 'plantuml-mode-hook 'hs-minor-mode)

#+END_SRC

** warning

#+BEGIN_SRC emacs-lisp

(setq plantuml-suppress-deprecation-warning nil)

#+END_SRC

* Neotree
** ISSUE Theme
   :LOGBOOK:
   - State "ISSUE"      from              [2019-01-30 mer. 11:16] \\
     Trop gros
   :END:

#+BEGIN_SRC emacs-lisp

  ;; (use-package all-the-icons
  ;;   :ensure t)

  ;; (setq neo-theme 'icons)

#+END_SRC

* Workspaces

#+BEGIN_SRC emacs-lisp

  (spacemacs/set-leader-keys "l" 'spacemacs/workspaces-transient-state/body)


#+END_SRC

