#+STARTUP: content

* Own menu

#+BEGIN_SRC emacs-lisp

 (spacemacs/declare-prefix "o" "own-menu")

#+END_SRC
* Graphic
** Modeline
*** Separators

#+BEGIN_SRC emacs-lisp

 (setq powerline-default-separator 'contour)


#+END_SRC

*** Remove minor modes

#+BEGIN_SRC emacs-lisp

(spaceline-toggle-minor-modes-off)

#+END_SRC

* navigation
** avy

#+BEGIN_SRC emacs-lisp

  (define-key evil-insert-state-map (kbd "C-.") 'avy-goto-word-1)
  (define-key evil-normal-state-map (kbd "C-.") 'avy-goto-word-1)
  (define-key evil-visual-state-map (kbd "C-.") 'avy-goto-word-1)
  (define-key evil-motion-state-map (kbd "C-.") 'avy-goto-word-1)

#+END_SRC

* Evil
** jk to Normal Mode

#+BEGIN_SRC emacs-lisp

(setq-default evil-escape-key-sequence "jk")
(setq-default evil-escape-unordered-key-sequence "jk")
(setq-default evil-escape-delay 0.5)

#+END_SRC

* Layouts
** Base Directory

#+BEGIN_SRC emacs-lisp

(setq spacemacs-layouts-directory "~/.spacemacs/layouts/")
(setq persp-save-dir "~/.spacemacs.d/layout/")
#+END_SRC

#+RESULTS:
: ~/.spacemacs/layouts/

* Org
** Org-bullets

Makes it all look a bit nicer, I hate looking at asterisks.
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t)
  (setq org-bullets-fac-name (quote org-bullet-face))
  (add-hook 'org-mode-hook (lambda ()(org-bullets-mode 1)))

  (setq org-bullets-bullet-list '("·"))

  ;(setq org-ellipsis " ▼")
  (set-display-table-slot standard-display-table 
      'selective-display (string-to-vector " …")) ; or whatever you like
#+END_SRC

** TO DO keywords

#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'org
    (setq org-todo-keywords 
        '((sequence "NOW(n)" "TODO(t)" "CHECK(c@)" "LATER(l)" "WAIT(w@)" "|" "DONE(d!)" )
        (sequence "BUG(b@)" "ISSUE(i@)" "|" "FIXED(f!)")
        (sequence "|" "CANCELED(a@)")
    ))

    (setq org-todo-keyword-faces
        '(
            ("NOW" .(:foreground "#ac7373" :weight bold)) 
            ("TODO" .(:foreground "#bc8383" :weight bold)) 
            ("DONE" .(:foreground "#94bff3")) 
            ("LATER" .(:foreground "#ffc9a4")) 
            ("CHECK" .(:foreground "#f0dfaf")) 
            ("WAIT" .(:foreground "#ebe9bf")) 
            ("BUG" .(:foreground "#8c5353" :weight bold)) 
            ("ISSUE" .(:foreground "#dfaf8f")) 
            ("FIXED" .(:foreground "#9fc59f"))
            ("CANCELED" .(:foreground "#7f9f7f"))
    ))

    (setq org-log-into-drawer t)
  )
#+END_SRC

#+RESULTS:
: t

** ISSUE < & > as shiftmetaleft/right
   :LOGBOOK:
   - State "ISSUE"      from              [2019-01-14 lun. 16:25] \\
     doesn't work
   :END:

  #+BEGIN_SRC emacs-lisp
    ;(use-package org
    ;  :ensure t
    ;  :bind
    ;  (">" . org-shiftmetaleft)
    ;  ("<" . org-shiftmetaright)
    ;)
#+END_SRC

** Capture templates

#+BEGIN_SRC emacs-lisp
  (setq org-defaults-notes-file "~/Dropbox/document/notes/notes.org")
  (setq org-capture-templates
        '(
          ("h" "Home Entries")
          ("ht" "Todo" entry (file+headline "~/Dropbox/document/notes/todo.org" "Home")
            "* TODO %?\n")
          ("hi" "Inbox" entry (file+headline "~/Dropbox/document/notes/inbox.org" "Home")
           "* TODO %?\n %i\n\n")
          ("hj" "Journal" entry (file+datetree "~/Dropbox/document/notes/diary.org")
           "* %?\n")
          ("ha" "Agenda" entry (file+headline "~/Dropbox/document/notes/agenda.org" "Home")
           "* %?\n")
          ("w" "Work Entries")
          ("wt" "Todo" entry (file+headline "~/Dropbox/document/notes/todo.org" "Work")
            "* TODO %?\n")
          ("wi" "Inbox" entry (file+headline "~/Dropbox/document/notes/inbox.org" "Work")
            "* TODO %?\n %i\n\n")
          ("wj" "Journal" entry (file+datetree "~/Dropbox/document/notes/journal.org")
            "* %?\n")
          ("wa" "Agenda" entry (file+headline "~/Dropbox/document/notes/agenda.org" "Work")
            "* %?\n")
          ))
#+END_SRC

** Agenda
*** Transient state

#+BEGIN_SRC emacs-lisp

  (use-package org-agenda
    :config
      (evilified-state-evilify-map org-agenda-mode-map
        :mode org-agenda-mode
        :bindings
          (kbd "C-SPC") 'spacemacs/org-agenda-transient-state/body
          (kbd "C-c C-c") 'spacemacs/org-agenda-transient-state/body
    )
  )
#+END_SRC
** Plantuml
*** Babel

 #+BEGIN_SRC emacs-lisp

 (org-babel-do-load-languages
    'org-babel-load-languages
    '( (plantuml  . t)
       ))

 #+END_SRC

*** jar path

#+BEGIN_SRC emacs-lisp

(setq org-plantuml-jar-path "~/.spacemacs.d/extra/plantuml.jar")
(setq plantuml-jar-path "~/.spacemacs.d/extra/plantuml.jar")

#+END_SRC

** Scrivener

#+BEGIN_SRC emacs-lisp
  (defun my/org-tree-to-indirect-buffer-follow ()
    "Open tree in indirect buffer and follows it"
    (interactive)
    (org-tree-to-indirect-buffer)
    (windmove-right)
    )

  (defun my/scrivener ()
    "Opens the outline of the org doc on the left and allows you to open the content on the right"
    (interactive)
    (delete-other-windows)
    (split-window-right)
    (golden-ratio-mode 1)
    (setq golden-ratio-adjust-factor 1.3)
    )

  (add-hook 'org-mode-hook 
            (lambda ()
              (define-key evil-normal-state-map (kbd "<return>") 'org-tree-to-indirect-buffer)
              (define-key evil-normal-state-map (kbd "S-<return>") 'my/org-tree-to-indirect-buffer-follow)
              (spacemacs/set-leader-keys "os" 'my/scrivener)
  ))

#+END_SRC

** Babel

#+BEGIN_SRC emacs-lisp

(setq org-confirm-babel-evaluate nil)

#+END_SRC

* Display
** golden mode

#+BEGIN_SRC emacs-lisp

  (golden-ratio-mode 1)

#+END_SRC

* Yasnippet
** Directory

#+BEGIN_SRC emacs-lisp

(setq yas-snippet-dirs
      '("~/.spacemacs.d/snippets"                 ;; personal snippets
        ))

#+END_SRC
** Expand key

#+BEGIN_SRC emacs-lisp

(global-unset-key "\C-n")
(define-key yas-minor-mode-map (kbd "C-n") 'yas-ido-expand)

#+END_SRC
* Plantuml
** Hook

#+BEGIN_SRC emacs-lisp

(add-hook 'plantuml-mode-hook 'prog-mode-hook)

#+END_SRC

** warning

#+BEGIN_SRC emacs-lisp

(setq plantuml-suppress-deprecation-warning nil)

#+END_SRC

* Neotree
** Theme

#+BEGIN_SRC emacs-lisp

  (use-package all-the-icons
    :ensure t)

  (setq neo-theme 'icons)

#+END_SRC

